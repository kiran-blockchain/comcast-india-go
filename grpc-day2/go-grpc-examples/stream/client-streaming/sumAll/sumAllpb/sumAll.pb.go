// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sumAllpb/sumAll.proto

package sumallpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NumberRequest struct {
	N                    int32    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberRequest) Reset()         { *m = NumberRequest{} }
func (m *NumberRequest) String() string { return proto.CompactTextString(m) }
func (*NumberRequest) ProtoMessage()    {}
func (*NumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c125d35aa7430546, []int{0}
}

func (m *NumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberRequest.Unmarshal(m, b)
}
func (m *NumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberRequest.Marshal(b, m, deterministic)
}
func (m *NumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberRequest.Merge(m, src)
}
func (m *NumberRequest) XXX_Size() int {
	return xxx_messageInfo_NumberRequest.Size(m)
}
func (m *NumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumberRequest proto.InternalMessageInfo

func (m *NumberRequest) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type SumResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c125d35aa7430546, []int{1}
}

func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*NumberRequest)(nil), "sumall.NumberRequest")
	proto.RegisterType((*SumResponse)(nil), "sumall.SumResponse")
}

func init() {
	proto.RegisterFile("sumAllpb/sumAll.proto", fileDescriptor_c125d35aa7430546)
}

var fileDescriptor_c125d35aa7430546 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x2e, 0xcd, 0x75,
	0xcc, 0xc9, 0x29, 0x48, 0xd2, 0x87, 0x30, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd8, 0x8a,
	0x4b, 0x73, 0x13, 0x73, 0x72, 0x94, 0x64, 0xb9, 0x78, 0xfd, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x82,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x78, 0xb8, 0x18, 0xf3, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x83, 0x18, 0xf3, 0x94, 0x54, 0xb9, 0xb8, 0x83, 0x4b, 0x73, 0x83, 0x52, 0x8b, 0x0b, 0xf2,
	0xf3, 0x8a, 0x53, 0x85, 0xc4, 0xb8, 0xd8, 0x82, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0xa0, 0x2a, 0xa0,
	0x3c, 0x23, 0x4f, 0x2e, 0xde, 0x60, 0xb0, 0xe9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42,
	0x16, 0x5c, 0x6c, 0x10, 0x01, 0x21, 0x51, 0x3d, 0x88, 0x4d, 0x7a, 0x28, 0xd6, 0x48, 0x09, 0xc3,
	0x84, 0x91, 0x8c, 0x57, 0x62, 0xd0, 0x60, 0x74, 0xe2, 0x8a, 0xe2, 0x80, 0xc8, 0x14, 0x24, 0x25,
	0xb1, 0x81, 0xdd, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x98, 0xff, 0xb3, 0x8a, 0xc4, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SumAllServiceClient is the client API for SumAllService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumAllServiceClient interface {
	// client streaming rpc service
	SumAll(ctx context.Context, opts ...grpc.CallOption) (SumAllService_SumAllClient, error)
}

type sumAllServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSumAllServiceClient(cc grpc.ClientConnInterface) SumAllServiceClient {
	return &sumAllServiceClient{cc}
}

func (c *sumAllServiceClient) SumAll(ctx context.Context, opts ...grpc.CallOption) (SumAllService_SumAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SumAllService_serviceDesc.Streams[0], "/sumall.SumAllService/SumAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumAllServiceSumAllClient{stream}
	return x, nil
}

type SumAllService_SumAllClient interface {
	Send(*NumberRequest) error
	CloseAndRecv() (*SumResponse, error)
	grpc.ClientStream
}

type sumAllServiceSumAllClient struct {
	grpc.ClientStream
}

func (x *sumAllServiceSumAllClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sumAllServiceSumAllClient) CloseAndRecv() (*SumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SumAllServiceServer is the server API for SumAllService service.
type SumAllServiceServer interface {
	// client streaming rpc service
	SumAll(SumAllService_SumAllServer) error
}

// UnimplementedSumAllServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSumAllServiceServer struct {
}

func (*UnimplementedSumAllServiceServer) SumAll(srv SumAllService_SumAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SumAll not implemented")
}

func RegisterSumAllServiceServer(s *grpc.Server, srv SumAllServiceServer) {
	s.RegisterService(&_SumAllService_serviceDesc, srv)
}

func _SumAllService_SumAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumAllServiceServer).SumAll(&sumAllServiceSumAllServer{stream})
}

type SumAllService_SumAllServer interface {
	SendAndClose(*SumResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type sumAllServiceSumAllServer struct {
	grpc.ServerStream
}

func (x *sumAllServiceSumAllServer) SendAndClose(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sumAllServiceSumAllServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SumAllService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sumall.SumAllService",
	HandlerType: (*SumAllServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SumAll",
			Handler:       _SumAllService_SumAll_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sumAllpb/sumAll.proto",
}
