// Code generated by protoc-gen-go. DO NOT EDIT.
// source: countdownpb/countdown.proto

package countdownpb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CountdownRequest struct {
	Timer                int32    `protobuf:"varint,1,opt,name=Timer,proto3" json:"Timer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountdownRequest) Reset()         { *m = CountdownRequest{} }
func (m *CountdownRequest) String() string { return proto.CompactTextString(m) }
func (*CountdownRequest) ProtoMessage()    {}
func (*CountdownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b6f680ccd9e1640, []int{0}
}

func (m *CountdownRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountdownRequest.Unmarshal(m, b)
}
func (m *CountdownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountdownRequest.Marshal(b, m, deterministic)
}
func (m *CountdownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountdownRequest.Merge(m, src)
}
func (m *CountdownRequest) XXX_Size() int {
	return xxx_messageInfo_CountdownRequest.Size(m)
}
func (m *CountdownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountdownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountdownRequest proto.InternalMessageInfo

func (m *CountdownRequest) GetTimer() int32 {
	if m != nil {
		return m.Timer
	}
	return 0
}

type CountDownResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountDownResponse) Reset()         { *m = CountDownResponse{} }
func (m *CountDownResponse) String() string { return proto.CompactTextString(m) }
func (*CountDownResponse) ProtoMessage()    {}
func (*CountDownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b6f680ccd9e1640, []int{1}
}

func (m *CountDownResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountDownResponse.Unmarshal(m, b)
}
func (m *CountDownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountDownResponse.Marshal(b, m, deterministic)
}
func (m *CountDownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountDownResponse.Merge(m, src)
}
func (m *CountDownResponse) XXX_Size() int {
	return xxx_messageInfo_CountDownResponse.Size(m)
}
func (m *CountDownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountDownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountDownResponse proto.InternalMessageInfo

func (m *CountDownResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*CountdownRequest)(nil), "countdown.CountdownRequest")
	proto.RegisterType((*CountDownResponse)(nil), "countdown.CountDownResponse")
}

func init() {
	proto.RegisterFile("countdownpb/countdown.proto", fileDescriptor_8b6f680ccd9e1640)
}

var fileDescriptor_8b6f680ccd9e1640 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0xc9, 0x2f, 0xcf, 0x2b, 0x48, 0xd2, 0x87, 0xb3, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x38, 0xe1, 0x02, 0x4a, 0x1a, 0x5c, 0x02, 0xce, 0x30, 0x4e, 0x50, 0x6a, 0x61, 0x69, 0x6a,
	0x71, 0x89, 0x90, 0x08, 0x17, 0x6b, 0x48, 0x66, 0x6e, 0x6a, 0x91, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x6b, 0x10, 0x84, 0xa3, 0xa4, 0xc9, 0x25, 0x08, 0x56, 0xe9, 0x02, 0x56, 0x59, 0x5c, 0x90, 0x9f,
	0x57, 0x9c, 0x0a, 0x52, 0x0a, 0x36, 0x0b, 0xa6, 0x14, 0xcc, 0x31, 0x0a, 0xe6, 0xe2, 0x84, 0x2b,
	0x15, 0x72, 0xe3, 0x62, 0x0d, 0x2e, 0x49, 0x2c, 0x2a, 0x11, 0x92, 0xd6, 0x43, 0xb8, 0x03, 0xdd,
	0x4e, 0x29, 0x19, 0x74, 0x49, 0x64, 0x6b, 0x94, 0x18, 0x0c, 0x18, 0x9d, 0x78, 0xa3, 0xb8, 0x91,
	0xfc, 0x94, 0xc4, 0x06, 0xf6, 0x8a, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x0f, 0x9a, 0xc2,
	0xe9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CountDownClient is the client API for CountDown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountDownClient interface {
	// streaming rpc
	Start(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (CountDown_StartClient, error)
}

type countDownClient struct {
	cc grpc.ClientConnInterface
}

func NewCountDownClient(cc grpc.ClientConnInterface) CountDownClient {
	return &countDownClient{cc}
}

func (c *countDownClient) Start(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (CountDown_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CountDown_serviceDesc.Streams[0], "/countdown.CountDown/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &countDownStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CountDown_StartClient interface {
	Recv() (*CountDownResponse, error)
	grpc.ClientStream
}

type countDownStartClient struct {
	grpc.ClientStream
}

func (x *countDownStartClient) Recv() (*CountDownResponse, error) {
	m := new(CountDownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CountDownServer is the server API for CountDown service.
type CountDownServer interface {
	// streaming rpc
	Start(*CountdownRequest, CountDown_StartServer) error
}

// UnimplementedCountDownServer can be embedded to have forward compatible implementations.
type UnimplementedCountDownServer struct {
}

func (*UnimplementedCountDownServer) Start(req *CountdownRequest, srv CountDown_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}

func RegisterCountDownServer(s *grpc.Server, srv CountDownServer) {
	s.RegisterService(&_CountDown_serviceDesc, srv)
}

func _CountDown_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountDownServer).Start(m, &countDownStartServer{stream})
}

type CountDown_StartServer interface {
	Send(*CountDownResponse) error
	grpc.ServerStream
}

type countDownStartServer struct {
	grpc.ServerStream
}

func (x *countDownStartServer) Send(m *CountDownResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CountDown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "countdown.CountDown",
	HandlerType: (*CountDownServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _CountDown_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "countdownpb/countdown.proto",
}
